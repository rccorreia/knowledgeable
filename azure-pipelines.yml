# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
    - master

variables:
    # Azure Resource Manager connection created during pipeline creation
    azureSubscription: "da27d8c3-306c-4f49-8b48-495a72ff4cff"

    # Function app name
    functionAppName: "knowledgeable"

    # Agent VM image name
    vmImageName: "vs2017-win2016"

    # Working Directory
    workingDirectory: "$(System.DefaultWorkingDirectory)/src/knowledgeable"

    # Environments
    devEnvironment: "dev"
    qaEnvironment: "qa"
    prodEnvironment: "prod"

stages:
    - stage: Build
      displayName: Build stage

      jobs:
          - job: Build
            displayName: Build
            pool:
                vmImage: $(vmImageName)

            steps:
                - task: DotNetCoreCLI@2
                  displayName: Build
                  inputs:
                      command: "build"
                      projects: |
                          $(workingDirectory)/*.csproj
                      arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

                - task: DotNetCoreCLI@2
                  displayName: Unit Test
                  inputs:
                      command: "test"
                      projects: '**/*Unidade.Testes/*.csproj'

                - task: ArchiveFiles@2
                  displayName: "Archive files"
                  inputs:
                      rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
                      includeRootFolder: false
                      archiveType: zip
                      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
                      replaceExistingArchive: true

                - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
                  artifact: drop

    - stage: Deploy
      displayName: Deploy stage
      dependsOn: Build
      condition: succeeded()

      jobs:
          - deployment: Deploy
            displayName: Deploy
            environment: $(devEnvironment)
            pool:
                vmImage: $(vmImageName)

            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: AzureFunctionApp@1
                              displayName: "Azure functions app deploy"
                              inputs:
                                  azureSubscription: "$(azureSubscription)"
                                  appType: functionAppLinux
                                  appName: "$(functionAppName)-$(devEnvironment)"
                                  package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
                                  runtimeStack: "DOCKER|mcr.microsoft.com/azure-functions/dotnet:3.0.13113"
